
# This is a config file for Dragonfly's _multiedit.py command-module.
#  To use this config, you must rename this file to _multiedit.txt and
#  place it in the same directory as the _multiedit.py file.
#

# Pull in all of Dragonfly's action objects so that we can use them here.

from dragonfly import *


#---------------------------------------------------------------------------
# Here we define the release action which releases all
#  modifier-keys used within this grammar.  It is defined here
#  because this functionality is used in many different places.
#  Note that it is harmless to release ("...:up") a key multiple
#  times or when that key is not held down at all.

release = Key("shift:up, ctrl:up,alt:up")
pause = Pause("20")


#---------------------------------------------------------------------------
# Here we define the single-action commands.  These can be spoken
#  in series so as to execute multiple actions within a single utterance.

cmd.map = {
           # Spoken-form    ->    ->    ->     Action object

        "change name": Key("f2"),
           "page up [<n>]":                    Key("pgup:%(n)d"),
           "page down [<n>]":                  Key("pgdown:%(n)d"),
           "up <n> (page | pages)":            Key("pgup:%(n)d"),
           "down <n> (page | pages)":          Key("pgdown:%(n)d"),
           "toggle terminal":                  Key("shift:down") + Key("alt:down") + Key("c-t") + release,
           "make comment":                     Key("c-apostrophe"),

           "space [<n>]":                      release + Key("space:%(n)d"),
           "enter [<n>]":                      release + Key("enter:%(n)d"),
           "tab [<n>]":                        Key("tab:%(n)d"),
           "delete [<n>]":                     release + Key("del:%(n)d"),
           "delete [<n> | this] (line|lines)": release + Key("home, s-down:%(n)d, del"),
           "backspace [<n>]":                  release + Key("backspace:%(n)d"),
           "pop up":                           release + Key("apps"),

       
           "select all":                       release + Key("c-a"),
           "[hold] shift":                     Key("shift:down"),
           "release shift":                    Key("shift:up"),
           "[hold] control":                   Key("ctrl:down"),
           "release control":                  Key("ctrl:up"),
           "release [all]":                    release,

           "say <text>":                       release + Text("%(text)s"),
           "mimic <text>":                     release + Mimic(extra="text"),

	        'beginning': Key('g:2'),
            'end':      Key('G'),
            '[<n>] warp':     Key('w:%(n)d'),
            '[<n>] gorp':     Key('e:%(n)d'),
            '[<n>] dork':  Key('b:%(n)d'),
            'sub':      Key('0'),
            'cash':     Key('dollar'),
            'tomato':   Key('d:2'),
            'search [<text>]': Key('s-slash') + Text("%(text)s"),
            'line below': Key('o'),
            'line above': Key('O'),
            'insert': Key('i'),
            'normal': Key('escape'),
            'cancel':  Key('u'),
            'append': Key('a'),
            'append line': Key('A'),
            'left':  Key('h'),    
            'right': Key('l'),
            'down': Key('j'),
            'up': Key('k'),
            "[<n>] up": Key("k:%(n)d"),
            "[<n>] down": Key("j:%(n)d"),
            "[<n>] left": Key("h:%(n)d"),
            "[<n>] right": Key("l:%(n)d"),
            "[<n>] go up": Key("c-b:%(n)d"),
            "[<n>] go down": Key("c-f:%(n)d"),
            'remove': Key('x'),
            'pasta': Key('p'),
            'coffee': Key('y'),
            'visual':  Key('v'),
            'delete next': Key('d,w'),
            'delete this': Key('d,e'),	
            'sharp': Key('langle') + Key('rangle') + Key('left'),
            'visual line': Key('s-v'),
            'visual block': Key('c-v'),
            'slapper': Key('down')  + Key('tab'),
            'replace this':  Key('c,e'),
            '[is] leak':  Text('<='),
            '[is] greek':  Text('>='),
            'percussion': Key('percent'),
            'end line comma': Key("end") + Key("comma"),
            'banana': Key('end') + Pause("20") + Key('enter'),
            'copy line': Key('home') + Key('s-end') + Key('c-insert') + Key("escape"),
            'paste': Key("s-insert"),
            "delete line": Key("home") + Key("s-end") + Key("delete"),
            "editor left": Key("escape:2") + Key("c-pageup"),
            "editor right": Key("escape:2") + Key("c-pagedown"),

            "[<text>] plus equals [<text>][<n>]":                  Text('%(text)s +='),
            "[<text>] is equal [to] [<text>][<n>]":                     Text ("%(text)s =="),
            "[<text>] is identical [to] [<text>][<n>]":                 Text ("%(text)s ==="),
            "[<text>] is not equal [to] [<text>][<n>]":                 Text ("%(text)s !="),
            "[<text>] [is] (bigger|larger) [than] [<text>][<n>]":         Text("%(text)s >"),
            "[<text>] [is] (smaller|less) [than] [<text>][<n>]":                 Text("%(text)s <"),



            "slap [<n>]":                   Key('enter:%(n)d'),
            "tab":                          Key('tab'),
            "slatab":                       Key('enter') + Key('tab'),


            '[<n>] move left': pause + Key('left:%(n)d') + pause,
            '[<n>] move right': pause + Key('right:%(n)d') + pause,
            '[<n>] move up': pause + Key('up:%(n)d') + pause,
            '[<n>] move down': pause +  Key('down:%(n)d') + pause,


	    #NATO alphabet
	    	"upper adam"    : Key("A"),
			"upper Alpha"    : Key("A"),
			"upper bravo"    : Key("B"),
			"upper Charlie"  : Key("C"),
			"upper Callie"   : Key("C"),
			"upper Delta"    : Key("D"),
			"upper echo"     : Key("E"),
			"upper foxtrot"  : Key("F"),
			"upper golf"     : Key("G"),
			"upper gamma"    : Key("G"),
            "upper Juliet"   : Key("J"),
            "upper hotel"    : Key("H"),
            "upper India"    : Key("I"),
            "upper iota"     : Key("I"),
            "upper kilo"     : Key("K"),
            "upper Lima"     : Key("L"),
            "upper Mike"     : Key("M"),
            "upper nancy" : Key("N"),
            "upper November" : Key("N"),
            "upper Oscar"    : Key("O"),
            "upper Papa"     : Key("P"),
            "upper Queen"    : Key("Q"),
            "upper Romeo"    : Key("R"),
            "upper Rico"     : Key("R"),
            "upper soy"      : Key("S"),
            "upper tango"    : Key("T"),
            "upper toy"      : Key("T"),
            "upper uniform"  : Key("U"),
            "upper Victor"   : Key("V"),
            "upper Van"      : Key("V"),
            "upper whiskey"  : Key("W"),
            "upper x-ray"    : Key("X"),
            "upper yellow"   : Key("Y"),
            "upper Zulu"     : Key("Z"),
            "upper zebra"    : Key("Z"),
            "Adam"    : Key("a"),
            "Alpha"    : Key("a"),
            "bravo"    : Key("b"),
            "Charlie"  : Key("c"),
            "Callie"   : Key("c"),
            "Delta"    : Key("d"),
            "echo"     : Key("e"),
            "foxtrot"  : Key("f"),
            "golf"     : Key("g"),
            "gamma"    : Key("g"),
            "Juliet"   : Key("j"),
            "hotel"    : Key("h"),
            "India"    : Key("i"),
            "iota"    : Key("i"),
            "kilo"     : Key("k"),
            "Lima"     : Key("l"),
            "Mike"     : Key("m"),
            "Nancy" : Key("n"),
            "November" : Key("n"),
            "Oscar"    : Key("o"),
            "Papa"     : Key("p"),
            "Queen"    : Key("q"),
            "Romeo"    : Key("r"),
            "Rico"     : Key("r"),
            "soy"      : Key("s"),
            "tango"    : Key("t"),
            "toy"      : Key("t"),
            "uniform"  : Key("u"),
            "Victor"   : Key("v"),
            "Van"      : Key("v"),
            "whiskey"  : Key("w"),
            "x-ray"    : Key("x"),
            "yellow"   : Key("y"),
            "Zulu"     : Key("z"),
            "zebra"    : Key("z"),	
}

#--------------------------------------------------------------------------
# Here we define various functions for formatting text.
# Each of these functions must have a docstring which defines its
#  spoken-form.  This docstring must include the "<dictation>" extra.
#  See below for various examples.

# Format: some_words
def format_score(dictation):          # Function name must start with "format_".
    """ score <dictation> """         # Docstring defining spoken-form.
    text = str(dictation).lower()             # Get written-form of dictated text.
    return "_".join(text.split(" "))  # Put underscores between words.

# Format: some_words()
def format_under_function(dictation):
    """ under function <dictation> """
    text = str(dictation).lower()
    return "_".join(text.split(" ")) + "()"

# Format: SomeWords
def format_studley(dictation):
    """ studley <dictation> """
    text = str(dictation)
    words = [word.capitalize() for word in text.split(" ")]
    return "".join(words)

# Format: somewords
def format_one_word(dictation):
    """ [all] one word <dictation> """
    text = str(dictation)
    return "".join(text.split(" "))

# Format: SOMEWORDS
def format_upper_one_word(dictation):
    """ one word upper <dictation> """
    text = str(dictation)
    words = [word.upper() for word in text.split(" ")]
    return "".join(words)

# Format: SOME_WORDS
def format_upper_score(dictation):
    """ upper score <dictation> """
    text = str(dictation)
    words = [word.upper() for word in text.split(" ")]
    return "_".join(words)

# Format: someWords
def format_java_method(dictation):
    """ camel <dictation> """
    text = str(dictation)
    words = text.split(" ")
    return words[0] + "".join(w.capitalize() for w in words[1:])

# Format: someWords()
def format_java_method_parents(dictation):
    """ camel function <dictation> """
    text = str(dictation)
    words = text.split(" ")
    return words[0] + "".join(w.capitalize() for w in words[1:]) + "()"


# Format: someWords = 
def format_variable(dictation):
    """ variable <dictation> """
    text = str(dictation)
    words = text.split(" ")
    return words[0] + "".join(w.capitalize() for w in words[1:]) + ' = '

#Format: some.words.lol

def format_studded(dictation):
    """ dotify <dictation> """
    text = str(dictation).lower()
    words = text.split(" ")
    return ".".join(words)
